// 'use strict';

//1, New {} is created
//2, function is called, this = {}
//3, {} linked to prototype
//4, function automatically return {}
// const Person = function (firstName, birthYear) {
//   this.firstName = firstName;
//   this.birthYear = birthYear;
// };
// const vduong = new Person('Vduong', 2002);
// console.log(vduong);

// //prototypes
// console.log(Person.prototype);
// Person.prototype.calAge = function () {
//   console.log(2037 - this.birthYear);
// };

// vduong.calAge();

// console.log(vduong.__proto__);
// console.log(vduong.__proto__ === Person.prototype); // person.prototype kh√¥ng ph·∫£i l√† prototype c·ªßa  person . Person.prototype s·∫Ω ƒë∆∞·ª£c l√†m nguy√™n m·∫´u c·ªßa t·∫•t c·∫£ c√°c ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c t·∫°o b·ªüi h√†m kh·ªüi t·∫°o (Person contructor function)

// console.log(Person.prototype.isPrototypeOf(vduong));
// console.log(Person.prototype.isPrototypeOf(Person));

//Trong c∆° ch·∫ø k·∫ø th·ª´a prototype c·ªßa JavaScript, c√°c ƒë·ªëi t∆∞·ª£ng m·ªõi ƒë∆∞·ª£c t·∫°o b·∫±ng c√°ch s·ª≠ d·ª•ng t·ª´ kh√≥a new tr√™n m·ªôt h√†m t·∫°o s·∫Ω c√≥ __proto__ tr·ªè ƒë·∫øn thu·ªôc t√≠nh prototype c·ªßa h√†m t·∫°o ƒë√≥.
//V√¨ v·∫≠y, __proto__ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ truy c·∫≠p ƒë·∫øn c√°c thu·ªôc t√≠nh v√† ph∆∞∆°ng th·ª©c c·ªßa ƒë·ªëi t∆∞·ª£ng prototype c·ªßa m·ªôt ƒë·ªëi t∆∞·ª£ng c·ª• th·ªÉ,
// trong khi prototype l√† thu·ªôc t√≠nh ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒë·ªãnh nghƒ©a c√°c ph∆∞∆°ng th·ª©c v√† thu·ªôc t√≠nh cho c√°c ƒë·ªëi t∆∞·ª£ng m·ªõi ƒë∆∞·ª£c t·∫°o th√¥ng qua h√†m t·∫°o.
// .prototypeOfLinkObjects

// Person.prototype.species = 'Homo Sapiens';
// console.log(vduong.species);
// console.log(vduong.hasOwnProperty('firstName'));
// console.log(vduong.__proto__.hasOwnProperty('species'));

// const arr = [3, 6, 6, 5, 5, 6, 9, 9];

// Array.prototype.unique = function () {
//   return [...new Set(this)]; // ·ªü ƒë√¢y s·∫Ω tr·∫£ v·ªÅ c√°c ph·∫ßn t·ª≠ ch·ªâ xu·∫•t hi·ªán m·ªôt l·∫ßn trong m·∫£ng arr l√† [3, 6, 5, 9], this ·ªü ƒë√¢y tr·ªè ƒë·∫øn m·∫£ng arr
// };

// console.log(arr.unique);

// /*
// 1. Use a constructor function to implement a Car. A car has a make and a speed property. The speed property is the current speed of the car in km/h;
// 2. Implement an 'accelerate' method that will increase the car's speed by 10, and log the new speed to the console;
// 3. Implement a 'brake' method that will decrease the car's speed by 5, and log the new speed to the console;
// 4. Create 2 car objects and experiment with calling 'accelerate' and 'brake' multiple times on each of them.

// DATA CAR 1: 'BMW' going at 120 km/h
// DATA CAR 2: 'Mercedes' going at 95 km/h

// GOOD LUCK üòÄ
// */
// // const Car = function (make, speed) {
// //   this.make = make;
// //   this.speed = speed;
// // };

// // Car.prototype.accelerate = function () {
// //   this.speed += 10;
// //   console.log(`${this.make} going at ${this.speed} km/h`);
// // };

// // Car.prototype.brake = function () {
// //   this.speed -= 5;
// //   console.log(`${this.make} going at ${this.speed} km/h`);
// // };
// // const BMW = new Car('BMW', 120);
// // const Mercedes = new Car('Mercedes', 95);

// // BMW.accelerate();
// // Mercedes.accelerate();
// // BMW.brake();
// // Mercedes.brake();

// //Class declaration
class PersonCL {
  constructor(fullName, birthYear) {
    this.fullName = fullName;
    this.birthYear = birthYear;
  }
  calAge() {
    console.log(2037 - this.birthYear);
  }
  greet() {
    console.log(`Hey ${this.firstName}`);
  }
  get age() {
    return 2037 - this.birthYear;
  }
  // Set a property that already exists
  set fullName(name) {
    console.log(name);
    if (name.includes(' ')) this._fullName = name;
    else alert(`${name} is  not a full name`);
  }
  /** 
   */
  get fullName() {
    return this._fullName;
  }
  static hey() {
    console.log('Hey there üòä');
    console.log(this);
  }
}

const jessica = new PersonCL('jessica Davis', 1996);
console.log(jessica);  
jessica.calAge();

jessica.greet();
PersonCL.hey();
// // 1. Classes are not hoisted
// // 2. Class are first-class  citizes ƒëi·ªÅu n√†y c√≥ nghƒ©a l√† ch√∫ng c√≥ th·ªÉ truy·ªÅn ch√∫ng v√†o c√°c functions v√† c≈©ng c√≥ th·ªÉ tr·∫£ l·∫°i ch√∫ng t·ª´ c√°c functions
// // 3. Class are excuted in strict mode

// //M·ªçi ƒë·ªëi t∆∞·ª£ng trong Javascript ƒë·ªÅu c√≥ thu·ªôc t√≠nh setter v√† getter(l·∫•y v√† ƒë·∫∑t m·ªôt gi√° tr·ªã)
// const walter = new PersonCL('Walter White', 1965);
// const account = {
//   owner: 'vvduong',
//   movements: [1200, 530, 120, 300],

//   get latest() {
//     return this.movements.slice(-1).pop();
//   },
//   set latest(mov) {
//     this.movements.push(mov);
//   },
// };
// console.log(account.latest); // vi·∫øt h√†m latest nh∆∞ 1 m·ªôt properties r·∫•t useful khi ch√∫ng ta ƒë·ªçc m·ªôt th·ª© g√¨ ƒë√≥ d∆∞·ªõi d·∫°ng thu·ªôc t√≠nh m√† v·∫´n c·∫ßn th·ª±c hi·ªán m·ªôt s·ªë ph√©p t√≠nh tr∆∞·ªõc ƒë√≥

// account.latest = 50;
// console.log(account.movements);

// //Setter m·ªôt ph∆∞∆°ng th·ª©c cho ph√©p ta thi·∫øt l·∫≠p gi√° tr·ªã cho m·ªôt thu·ªôc t√≠nh. Khi m·ªôt thu·ªôc t√≠nh ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a l√† m·ªôt setter, th√¨ khi ta g√°n gi√° tr·ªã cho thu·ªôc t√≠nh ƒë√≥, n√≥ s·∫Ω ƒë∆∞·ª£c g√°n cho m·ªôt bi·∫øn ho·∫∑c thu·ªôc t√≠nh kh√°c ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong ph∆∞∆°ng th·ª©c setter ƒë√≥
// //Getter l√† m·ªôt ph∆∞∆°ng th·ª©c cho ph√©p l·∫•y gi√° tr·ªã c·ªßa thu·ªôc t√≠nh. Khi m·ªôt thu·ªôc t√≠nh ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a l√† m·ªôt getter, th√¨ khi ta g·ªçi thu·ªôc t√≠nh ƒë√≥, n√≥ s·∫Ω tr·∫£ v·ªÅ gi√° tr·ªã ƒë∆∞·ª£c t√≠nh to√°n b·ªüi ph∆∞∆°ng th·ª©c getter ƒë√≥, thay v√¨ tr·∫£ v·ªÅ gi√° tr·ªã c·ªßa thu·ªôc t√≠nh ƒë√≥.

// const PersonProto = {
//   calAge() {
//     console.log(2037 - this.birthYear);
//   },

//   init(firstName, birthYear) {
//     this.firstName = firstName;
//     this.birthYear = birthYear;
//   },
// };

// const steven = Object.create(PersonProto);
// console.log(steven);
// steven.name = 'Steven';
// steven.birthYear = 2002;
// steven.calAge();

// const sarah = Object.create(PersonProto);
// sarah.init('Sarah', 2000);
// sarah.calAge();

// /*
// 1. Re-create challenge 1, but this time using an ES6 class;
// 2. Add a getter called 'speedUS' which returns the current speed in mi/h (divide by 1.6);
// 3. Add a setter called 'speedUS' which sets the current speed in mi/h (but converts it to km/h before storing the value, by multiplying the input by 1.6);
// 4. Create a new car and experiment with the accelerate and brake methods, and with the getter and setter.

// DATA CAR 1: 'Ford' going at 120 km/h

// GOOD LUCK üòÄ
// */
// /////////////////////////////////////////////
// // Inheritance Between "Classes": Constructor Functions
// //Khi g·ªçi l·ªánh m·ªôt h√†m th√¥ng th∆∞·ªùng keyword trong h√†m m·∫∑c ƒë·ªãnh l√† underfine
// const Person = function (firstName, birthYear) {
//   this.firstName = firstName;
//   this.birthYear = birthYear;
// };

// Person.prototype.calcAge = function () {
//   console.log(2037 - this.birthYear);
// };

// const Student = function (firstName, birthYear, course) {
//   Person.call(this, firstName, birthYear);
//   this.course = course;
// };
// //linking prototypes
// Student.prototype = Object.create(Person.prototype);

// Student.prototype.introduce = function () {
//   console.log(`My name is ${this.firstName} and I study ${this.course}`);
// };
// const mike = new Student('Mike', 2020, 'Computer Science');
// mike.introduce();
// mike.calcAge();
//Challenge 3
/* 
1. Use a constructor function to implement an Electric Car (called EV) as a CHILD "class" of Car. Besides a make and current speed, the EV also has the current battery charge in % ('charge' property);
2. Implement a 'chargeBattery' method which takes an argument 'chargeTo' and sets the battery charge to 'chargeTo';
3. Implement an 'accelerate' method that will increase the car's speed by 20, and decrease the charge by 1%. Then log a message like this: 'Tesla going at 140 km/h, with a charge of 22%';
4. Create an electric car object and experiment with calling 'accelerate', 'brake' and 'chargeBattery' (charge to 90%). Notice what happens when you 'accelerate'! HINT: Review the definiton of polymorphism üòâ

DATA CAR 1: 'Tesla' going at 120 km/h, with a charge of 23%

GOOD LUCK üòÄ
*/
// const Car = function (make, speed) {
//   this.make = make;
//   this.speed = speed;
// };

// Car.prototype.accelerate = function () {
//   this.speed += 10;
//   console.log(`${this.make} is going at ${this.speed} km/h`);
// };

// Car.prototype.brake = function () {
//   this.speed -= 5;
//   console.log(`${this.make} is going at ${this.speed} km/h`);
// };

// const EV = function (make, speed, charge) {
//   Car.call(this, make, speed);
//   this.charge = charge;
// };

// EV.prototype = Object.create(Car.prototype);

// EV.prototype.chargeBattery = function (chargeTo) {
//   this.charge = chargeTo;
// };
// EV.prototype.accelerate = function () {
//   this.speed += 20;
//   this.charge--;
//   console.log(
//     `${this.make} is going at ${this.speed} km/h, with a charge of ${this.charge}`
//   );
// };

// const tesla = new EV('Tesla', 120, 23);
// tesla.chargeBattery(90);
// console.log(tesla);
// tesla.brake();
// tesla.accelerate();
